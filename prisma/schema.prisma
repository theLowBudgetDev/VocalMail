// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./vocalmail.db"
}

model User {
  id              Int       @id @default(autoincrement())
  email           String    @unique
  name            String
  password        String?
  avatar          String?
  createdAt       DateTime  @default(now())
  sentEmails      Email[]   @relation("SentEmails")
  receivedEmails  EmailRecipient[]
  contacts        Contact[] @relation("UserContacts")
  ownedContacts   Contact[] @relation("OwnerContacts")
}

model Contact {
  ownerId       Int
  contactUserId Int
  owner         User @relation("OwnerContacts", fields: [ownerId], references: [id])
  contactUser   User @relation("UserContacts", fields: [contactUserId], references: [id])

  @@id([ownerId, contactUserId])
}

model Email {
  id          Int      @id @default(autoincrement())
  senderId    Int
  sender      User     @relation("SentEmails", fields: [senderId], references: [id])
  subject     String
  body        String   @db.Text
  sentAt      DateTime @default(now())
  recipients  EmailRecipient[]
  senderStatus String @default("sent") // e.g., 'sent', 'deleted'
}

model EmailRecipient {
  emailId     Int
  recipientId Int
  email       Email @relation(fields: [emailId], references: [id], onDelete: Cascade)
  recipient   User  @relation(fields: [recipientId], references: [id])
  read        Boolean @default(false)
  status      String  @default("inbox") // e.g., 'inbox', 'archive', 'deleted'

  @@id([emailId, recipientId])
}


model AudioCache {
  text          String @id
  audioDataUri  String @db.Text
  createdAt     DateTime @default(now())
}
