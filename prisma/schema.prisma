// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./vocalmail.db"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String?

  sentEmails Email[] @relation("SentEmails")
  receivedEmails EmailRecipient[] @relation("ReceivedEmails")
  ownedContacts Contact[] @relation("OwnedContacts")
  contactIn Contact[] @relation("ContactIn")
}

model Email {
  id        Int      @id @default(autoincrement())
  senderId  Int
  subject   String
  body      String
  sentAt    DateTime @default(now())
  senderStatus String  // e.g., 'sent', 'deleted'

  sender    User     @relation("SentEmails", fields: [senderId], references: [id])
  recipients EmailRecipient[]
}

model EmailRecipient {
  emailId     Int
  recipientId Int
  read        Boolean  @default(false)
  status      String   // e.g., 'inbox', 'archive', 'deleted'

  email       Email    @relation(fields: [emailId], references: [id], onDelete: Cascade)
  recipient   User     @relation("ReceivedEmails", fields: [recipientId], references: [id])

  @@id([emailId, recipientId])
}


model Contact {
  ownerId       Int
  contactUserId Int

  owner         User @relation("OwnedContacts", fields: [ownerId], references: [id])
  contactUser   User @relation("ContactIn", fields: [contactUserId], references: [id])

  @@id([ownerId, contactUserId])
}

model AudioCache {
    text          String @id
    audioDataUri  String
}
